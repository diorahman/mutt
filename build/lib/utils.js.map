{"version":3,"sources":["utils.js"],"names":[],"mappings":";;;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;AAEA,IAAM,KAAK,IAAI,iBAAI,EAAR,CAAW;AAClB,iBAAa,QAAQ,GAAR,CAAY,iBADP;AAElB,qBAAiB,QAAQ,GAAR,CAAY,qBAFX;AAGlB,YAAQ,QAAQ,GAAR,CAAY,cAAZ,IAA8B;AAHpB,CAAX,CAAX;;AAMA,IAAM,UAAU,SAAV,OAAU,CAAC,IAAD,EAAyB;AAAA,QAAlB,IAAkB,yDAAX,MAAW;;AACrC,WAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,aAAK,OAAL,CAAa,IAAb;AACA,iCAAK,KAAK,IAAL,CAAU,GAAV,CAAL,EAAqB,UAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAA2B;AAC5C,gBAAI,KAAJ,EAAW;AACP,uBAAO,OAAO,KAAP,CAAP;AACH;AACD,mBAAO,QAAQ;AACX,8BADW;AAEX;AAFW,aAAR,CAAP;AAIH,SARD;AASH,KAXM,CAAP;AAYH,CAbD;;AAeA,IAAM,MAAM,SAAN,GAAM,GAAkB;AAAA,QAAjB,OAAiB,yDAAP,EAAO;;AAC1B,WAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,uBAAK,OAAL,EAAc,UAAC,KAAD,EAAQ,IAAR,EAAc,EAAd,EAAkB,OAAlB,EAA8B;AACxC,gBAAI,KAAJ,EAAW;AACP,uBAAO,OAAO,KAAP,CAAP;AACH;AACD,oBAAQ;AACJ,0BADI;AAEJ,sBAFI;AAGJ;AAHI,aAAR;AAKH,SATD;AAUH,KAXM,CAAP;AAYH,CAbD;;AAeA,IAAM;AAAA,wDAAc,iBAAO,IAAP,EAAa,SAAb;AAAA,oBACR,IADQ,EACF,GADE;;AAAA;AAAA;AAAA;AAAA;AAAA,iCACM,iBAAM,IAAN,CADN;AACR,4BADQ,UACR,IADQ;AACF,2BADE,UACF,GADE;AAAA,yDAET,IAAI;AACP,kCAAM,IADC;AAEP,oCAAW,IAAX,QAFO;AAGP,qCAAS,aAAa;AAHf,yBAAJ,CAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AASA,IAAM;AAAA,wDAAuB,kBAAO,IAAP,EAAa,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,0DAClB,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,gCAAM,SAAS,2BAAkB,WAAlB,CAAf;AACA,mDAAQ,IAAR,EACK,EADL,CACQ,UADR,EACoB,UAAC,QAAD,EAAc;AAAA,oCAClB,UADkB,GACH,QADG,CAClB,UADkB;;AAE1B,oCAAI,eAAe,GAAnB,EAAwB;AACpB,2CAAO,OAAO,IAAI,KAAJ,CAAU,UAAV,CAAP,CAAP;AACH;AACJ,6BANL,EAOK,IAPL,CAOU,MAPV;AAQA,mCAAO,EAAP,CAAU,QAAV,EAAoB,YAAM;AACtB,wCAAQ,WAAR;AACH,6BAFD;AAGA,mCAAO,EAAP,CAAU,OAAV,EAAmB,MAAnB;AACH,yBAdM,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkBA,IAAM;AAAA,wDAAqB,kBAAO,GAAP,EAAY,MAAZ,EAAoB,WAApB;AAAA,YACjB,IADiB;AAAA;AAAA;AAAA;AAAA;AACjB,4BADiB,GACV,GAAG,YAAH,CAAgB,WAAhB,EAA6B,EAAE,QAAF,EAAO,cAAP,EAA7B,CADU;AAAA,0DAEhB,qBAAqB,IAArB,EAA2B,WAA3B,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA,IAAM;AAAA,wDAAW;AAAA,YAAS,IAAT,QAAS,IAAT;AAAA,YAAe,GAAf,QAAe,GAAf;AAAA,YAAoB,MAApB,QAAoB,MAApB;AAAA,YAA4B,GAA5B,QAA4B,GAA5B;;AAAA,mBACL,IADK,EACC,OADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACmB,YAAY,QAAQ,GAApB,EAAyB,GAAzB,CADnB;;AAAA;AAAA;AACL,4BADK,SACL,IADK;AACC,+BADD,SACC,OADD;;AAAA,6BAET,IAFS;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGH,qBAAqB,IAArB,EAA2B,IAA3B,CAHG;;AAAA;AAAA;AAAA;;AAAA;AAAA,8BAIF,OAAO,MAJL;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKH,mBAAmB,GAAnB,EAAwB,MAAxB,EAAgC,IAAhC,CALG;;AAAA;AAAA;AAAA;;AAAA;AAAA,0DAOF,IAPE;;AAAA;AAAA,0DASN,EAAE,UAAF,EAAQ,gBAAR,EATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAYS,O,GAAA,O;QAAS,G,GAAA,G;QAAK,Q,GAAA,Q","file":"utils.js","sourcesContent":["/* eslint-disable one-var */\nimport AWS from 'aws-sdk';\nimport { file } from 'tmp';\nimport { parse } from 'path';\nimport request from 'request';\nimport Promise from 'bluebird';\nimport { exec } from 'child_process';\nimport { createWriteStream } from 'fs';\n\nconst s3 = new AWS.S3({\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_ACCESS_KEY_SECRET,\n    region: process.env.AWS_SQS_REGION || 'ap-southeast-1'\n});\n\nconst execute = (args, file = 'mutt') => {\n    return new Promise((resolve, reject) => {\n        args.unshift(file);\n        exec(args.join(' '), (error, stdout, stderr) => {\n            if (error) {\n                return reject(error);\n            }\n            return resolve({\n                stdout,\n                stderr\n            });\n        });\n    });\n};\n\nconst tmp = (options = {}) => {\n    return new Promise((resolve, reject) => {\n        file(options, (error, path, fd, cleanup) => {\n            if (error) {\n                return reject(error);\n            }\n            resolve({\n                path,\n                fd,\n                cleanup\n            });\n        });\n    });\n};\n\nconst tmpFromPath = async (path, extension) => {\n    const { name, ext } = parse(path);\n    return tmp({\n        keep: true,\n        prefix: `${name}___`,\n        postfix: extension || ext\n    });\n};\n\nconst downloadFileFromLink = async (link, destination) => {\n    return new Promise((resolve, reject) => {\n        const stream = createWriteStream(destination);\n        request(link)\n            .on('response', (response) => {\n                const { statusCode } = response;\n                if (statusCode !== 200) {\n                    return reject(new Error(statusCode));\n                }\n            })\n            .pipe(stream);\n        stream.on('finish', () => {\n            resolve(destination);\n        });\n        stream.on('error', reject);\n    });\n};\n\nconst downloadFileFromS3 = async (Key, Bucket, destination) => {\n    const link = s3.getSignedUrl('getObject', { Key, Bucket });\n    return downloadFileFromLink(link, destination);\n};\n\nconst download = async ({ link, key, bucket, ext }) => {\n    const { path, cleanup } = await tmpFromPath(link || key, ext);\n    if (link) {\n        await downloadFileFromLink(link, path);\n    } else if (key && bucket) {\n        await downloadFileFromS3(key, bucket, path);\n    } else {\n        return null;\n    }\n    return { path, cleanup };\n};\n\nexport { execute, tmp, download };\n"],"sourceRoot":"/Users/diorahman/Experiments/hooq/src/luigi/mutt/lib"}